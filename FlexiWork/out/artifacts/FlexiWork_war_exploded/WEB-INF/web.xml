<?xml version="1.0" encoding="UTF-8"?>
<!--这段XML代码是一个典型的web.xml配置文件，定义了一个Java Web应用程序的基本配置，包括欢迎页面、Spring和Spring MVC的初始化、过滤器、Servlet配置以及JSP标签库配置。-->

<!--应用启动与上下文加载：通过ContextLoaderListener启动时加载Spring应用上下文，管理应用中的Beans和依赖注入。
字符编码处理：CharacterEncodingFilter确保请求和响应使用统一的UTF-8编码，防止多语言字符集的乱码问题。
请求处理与路由：DispatcherServlet作为Spring MVC的前端控制器，负责将请求路由到相应的处理器（控制器）。
资源映射与管理：通过Servlet映射和欢迎文件配置，管理请求路径和默认页面响应。
扩展与灵活性：使用JSP自定义标签库（commons.tld），增强JSP页面的功能和可维护性。-->

<!--XML声明：指定文档版本和编码。
根元素声明：定义Web应用程序的规范版本为3.0。xmlns定义了命名空间，xsi:schemaLocation指定了XML Schema的位置以进行验证。-->
<web-app xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns="http://java.sun.com/xml/ns/javaee" xmlns:web="http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd"
	xsi:schemaLocation="http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd"
	id="WebApp_ID" version="3.0">

	<!--显示名称：指定Web应用程序的名称为“moonlighting”。-->
	<display-name>FlexiWork</display-name>
	<!--欢迎文件列表：指定默认欢迎页面为index.jsp，当用户访问根URL时，将自动重定向到此页面。-->
	<welcome-file-list>
		<welcome-file>index.jsp</welcome-file>
	</welcome-file-list>

	<!-- (配置spring路径)上下文参数：定义Spring的配置文件位置为applicationContext.xml，Spring应用上下文会使用这个文件来初始化Beans。 -->
	<context-param>
		<param-name>contextConfigLocation</param-name>
		<param-value>classpath:applicationContext.xml</param-value>
	</context-param>

	<!-- (配置监听器启动spring容器)监听器配置：配置ContextLoaderListener，用于在Web应用启动时加载Spring应用上下文，初始化所有定义的Spring Beans -->
	<listener>
		<listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>
	</listener>


	<!-- (配置过滤器，解决post的乱码问题)字符编码过滤器：使用CharacterEncodingFilter解决POST请求的乱码问题，强制将请求和响应的编码设置为UTF-8。filter-mapping配置该过滤器应用于所有请求路径 -->
	<filter>
		<filter-name>encoding</filter-name>
		<filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class>
		<init-param>
			<param-name>encoding</param-name>
			<param-value>UTF-8</param-value>
		</init-param>
	</filter>
	<filter-mapping>
		<filter-name>encoding</filter-name>
		<url-pattern>/*</url-pattern>
	</filter-mapping>

	<!-- 配置SpringMVC -->
	<!--Servlet定义：配置Spring MVC的核心DispatcherServlet，用于处理Web请求。springmvc.xml指定DispatcherServlet的配置文件。
	初始化加载：<load-on-startup>1</load-on-startup>指定Servlet容器启动时立即加载DispatcherServlet。
	URL映射：将所有以.action结尾的请求映射到DispatcherServlet进行处理。-->
	<servlet>
		<servlet-name>moon</servlet-name>
		<servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
		<init-param>
			<param-name>contextConfigLocation</param-name>
			<param-value>classpath:springmvc.xml</param-value>
		</init-param>
		<!-- 配置springmvc什么时候启动，参数必须为整数 -->
		<!-- 如果为0或者大于0，则springMVC随着容器启动而启动 -->
		<!-- 如果小于0，则在第一次请求进来的时候启动 -->
		<load-on-startup>1</load-on-startup>
	</servlet>
	<servlet-mapping>
		<servlet-name>moon</servlet-name>
		<!-- .action结尾的请求都进入springMVC -->
		<url-pattern>*.action</url-pattern>
	</servlet-mapping>

	<!-- (分页链接配置)JSP配置：配置自定义JSP标签库的URI和位置，commons.tld定义了在JSP页面中使用的自定义标签。 -->
	<jsp-config>
		<taglib>
			<taglib-uri>http://com.work/common</taglib-uri>
			<taglib-location>/tld/commons.tld</taglib-location>
		</taglib>
	</jsp-config>
</web-app>